---
import PageLayout from "@layouts/PageLayout.astro";
import { DYNAMIC_PRICING } from "@consts";
import TwinklingStars from "@components/TwinklingStars.astro";
import MeteorShower from "@components/MeteorShower.astro";
import BackgroundFX from "@components/page_effects/BackgroundFX.astro";
---

<PageLayout title="Dynamiczna Wycena" description={DYNAMIC_PRICING.DESCRIPTION}>
  <!-- Light Mode: Particles -->
  <div class="absolute inset-0 block dark:hidden">
    <div id="particles1" class="fixed inset-0"></div>
    <div id="particles2" class="fixed inset-0"></div>
    <div id="particles3" class="fixed inset-0"></div>
  </div>

  <!-- Dark Theme: Stars -->
  <div class="absolute inset-0 hidden dark:block">
    <div id="stars1" class="fixed inset-0"></div>
    <div id="stars2" class="fixed inset-0"></div>
    <div id="stars3" class="fixed inset-0"></div>
  </div>

  <!-- Twinkling Stars / Meteor -->
  <div id="galaxy" class="fixed inset-0">
    <div class="hidden dark:block">
      <TwinklingStars />
      <MeteorShower />
    </div>
  </div>
  <BackgroundFX />

  <!-- Root Container -->
  <div class="fixed inset-0 flex items-center justify-center mb-44">
    <div id="root_container" class="relative w-svw h-svh perspective-[1500px]">
      <!-- Template -->
      <div
        id="template"
        class="hidden absolute inset-0 flex-col items-center justify-center backface-hidden"
      >
        <!-- Progress Bar -->
        <div
          class="progress-container w-[50%] h-1.5 mb-4 bg-gray-200 dark:bg-gray-700 rounded-full transition-all duration-500 ease-in-out mx-auto"
        >
          <div
            class="progress-bar bg-black dark:bg-white h-full rounded-full w-[0%] transition-all duration-500 ease-in-out"
          >
          </div>
        </div>

        <!-- Titles -->
        <p
          class="slide-title text-2xl md:text-4xl font-bold text-center opacity-0"
        >
          Dynamiczny Kalkulator
        </p>
        <p class="slide-subtitle text-md md:text-lg text-center mb-6 opacity-0">
          Test
        </p>

        <!-- Buttons -->
        <div class="buttons flex flex-col space-y-4 items-center opacity-0 w-full pr-5 pl-5">
          <button
            class="tmpl-button-with-arrow backdrop-blur-sm group min-w-[90%] sm:min-w-[50%] p-2 gap-3 flex items-center border rounded-lg hover:scale-105 hover:bg-black/5 hover:dark:bg-white/10 border-black/15 dark:border-white/20 transition-all duration-300 ease-in-out"
          >
            <span
              class="button-text w-full z-10 relative group-hover:text-black group-hover:dark:text-white text-center"
            >
              Text
            </span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke-width="2.5"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="stroke-current group-hover:stroke-black group-hover:dark:stroke-white z-10"
            >
              <line
                x1="5"
                y1="12"
                x2="19"
                y2="12"
                class="scale-x-0 group-hover:scale-x-100 translate-x-4 group-hover:translate-x-1 transition-all duration-300 ease-in-out"
              ></line>
              <polyline
                points="12 5 19 12 12 19"
                class="translate-x-0 group-hover:translate-x-1 transition-all duration-300 ease-in-out"
              ></polyline>
            </svg>
          </button>
        </div>

        <p
          class="slide-pricing text-md md:text-lg text-center m-6 opacity-0 font-bold"
        >
          (Wersja testowa)
        </p>
      </div>
    </div>
  </div>
</PageLayout>

<script>
  import { gsap } from "gsap";

  interface Option {
    label: string;
    price: number;
  }
  interface Step {
    question: string;
    description?: string;
    options: Option[];
  }
  interface Categories {
    [key: string]: Step[];
  }

  const categories: Categories = {
    "Video Editing": [
      {
        question: "Jaką jakość wideo wybierasz?",
        options: [
          { label: "720p60 / Basic", price: 25 }, // ~5$ przeliczając na PLN ~25
          { label: "1080p60 / Standard", price: 100 },
          { label: "2160p60 / Premium", price: 125 },
        ],
      },
      {
        question: "Jak zaawansowany montaż potrzebujesz?",
        options: [
          { label: "Podstawowy – cięcie i proste efekty", price: 50 },
          {
            label:
              "Zaawansowany – animacje 3D, efekty dźwiękowe, kolor grading",
            price: 200,
          },
          {
            label:
              "Profesjonalny – pełen pakiet efektów, animacje, dźwięk, kolory, unlimited footage",
            price: 350,
          },
        ],
      },
      {
        question: "Dodatkowe usługi montażowe",
        options: [
          { label: "Dodanie napisów / lektora", price: 50 },
          { label: "Licencje muzyczne / efekty dźwiękowe", price: 30 },
          { label: "Korekcja kolorów i grading", price: 70 },
        ],
      },
    ],
    "Strony WWW": [
      {
        question: "Typ strony?",
        options: [
          { label: "WordPress Starter", price: 1000 },
          { label: "Strona statyczna / Astro", price: 2800 }, 
          { label: "Sklep WooCommerce", price: 1800 },
        ],
      },
      {
        question: "Responsywność / Mobile Friendly?",
        options: [
          { label: "Standard – podstawowe dopasowanie do urządzeń", price: 0 },
          {
            label:
              "Zaawansowana – dopracowane UI/UX na wszystkich urządzeniach",
            price: 300,
          },
        ],
      },
      {
        question: "Dodatkowe funkcje / personalizacja",
        options: [
          { label: "Optymalizacja wydajności / Lighthouse", price: 200 },
          { label: "Integracja z API / dodatkowe wtyczki", price: 400 },
          { label: "Raporty techniczne i wsparcie miesięczne", price: 150 },
        ],
      },
    ],
    "Wydruk 3D": [
      {
        question: "Rodzaj materiału?",
        options: [
          { label: "PLA (~50 zł / kg)", price: 50 },
          { label: "PETG (~90 zł / kg)", price: 90 },
          { label: "TPU (~120 zł / kg)", price: 120 },
        ],
      },
      {
        question: "Skomplikowanie modelu / czas druku?",
        options: [
          { label: "Prosty – szybki wydruk, standardowa jakość", price: 0 },
          { label: "Średni – średnio złożone modele", price: 40 },
          {
            label:
              "Zaawansowany – skomplikowane modele / długi czas drukowania",
            price: 80,
          },
        ],
      },
      {
        question: "Dodatkowe opcje / wykończenie",
        options: [
          { label: "Szlifowanie i wygładzanie powierzchni", price: 50 },
          { label: "Malowanie / post-processing", price: 80 },
          { label: "Projektowanie modelu na zamówienie", price: 100 },
        ],
      },
    ],
  };

  const container = document.getElementById("root_container") as HTMLDivElement;
  const template = document.getElementById("template") as HTMLDivElement;
  const prettyChoices: string[] = [];
  const selectedCategory: string[] = [];

  let slides: HTMLDivElement[] = [];
  let currentSlideIndex = 0;
  let totalPrice = 0;
  let currentStepPrice = 0;
  let totalSteps = 0;
  let isAnimating = false;

  function setupFirstSlide(): void {
    const firstSlide = template.cloneNode(true) as HTMLDivElement;
    firstSlide.classList.remove("hidden");
    firstSlide.classList.add("slide_frame");
    firstSlide.removeAttribute("id");

    const title = firstSlide.querySelector(
      ".slide-title"
    ) as HTMLParagraphElement;
    const subtitle = firstSlide.querySelector(
      ".slide-subtitle"
    ) as HTMLParagraphElement;
    title.textContent = "Wybierz rodzaj projektu:";
    subtitle.textContent = "";

    const btnContainer = firstSlide.querySelector(".buttons") as HTMLDivElement;
    const tmplButton = firstSlide.querySelector(
      ".tmpl-button-with-arrow"
    ) as HTMLButtonElement;
    btnContainer.innerHTML = "";

    Object.keys(categories).forEach((cat) => {
      const btn = tmplButton.cloneNode(true) as HTMLButtonElement;
      const span = btn.querySelector(".button-text") as HTMLSpanElement;
      span.textContent = cat;
      btn.addEventListener("click", () => generateSlidesForCategory(cat));
      btnContainer.appendChild(btn);
    });

    tmplButton.remove();

    // const pricing = firstSlide.querySelector(
    //   ".slide-pricing"
    // ) as HTMLParagraphElement;
    // if (pricing) {
    //   pricing.textContent = `${totalPrice} PLN`;
    //   gsap.set(pricing, { opacity: 0, y: 20 });
    // }

    // firstSlide.style.position = "absolute";
    // firstSlide.style.top = "50%";
    // firstSlide.style.left = "0";
    // firstSlide.style.transform = "translate(0, -50%)";
    // firstSlide.style.width = "100vw";
    // firstSlide.style.flexShrink = "0";

    gsap.set(firstSlide, {
      z: 900,
      opacity: 0,
      scale: 0.7,
      filter: "blur(5px)",
      zIndex: 10,
      pointerEvents: "none",
    });

    container.appendChild(firstSlide);
    slides.push(firstSlide);

    gsap.to(firstSlide, {
      z: 0,
      opacity: 1,
      scale: 1,
      filter: "blur(0px)",
      duration: 0.8,
      ease: "power2.out",
      onComplete: () => {
        fadeInContent(firstSlide);
        firstSlide.style.pointerEvents = "auto";
      },
    });
  }

  setupFirstSlide();

  function fadeInContent(slide: HTMLDivElement) {
    const title = slide.querySelector(".slide-title") as HTMLParagraphElement;
    // const progressContainer = slide.querySelector(
    //   ".progress-container"
    // ) as HTMLDivElement;
    const subtitle = slide.querySelector(
      ".slide-subtitle"
    ) as HTMLParagraphElement;
    const buttons = slide.querySelector(".buttons") as HTMLDivElement;
    const pricing = slide.querySelector(
      ".slide-pricing"
    ) as HTMLParagraphElement;

    const elements: HTMLElement[] = [];
    if (title) elements.push(title);
    if (subtitle) elements.push(subtitle);
    if (buttons) elements.push(buttons);
    if (pricing) elements.push(pricing);
    // if (progressContainer) elements.push(progressContainer);

    slide.querySelectorAll("button").forEach((b) => {
      b.disabled = true;
      gsap.set(b, { opacity: 0.9 });
    });

    gsap.set(elements, { opacity: 0, y: 20, pointerEvents: "none" });
    gsap.to(elements, {
      opacity: 1,
      y: 0,
      duration: 0.6,
      delay: 0.3,
      stagger: 0.1,
      pointerEvents: "auto",
      onComplete: () => {
        slide.querySelectorAll("button").forEach((b) => {
          gsap.to(b, { opacity: 1, duration: 0.3, ease: "power2.out" });
          b.disabled = false;
        });
      },
    });
  }

  function generateSlidesForCategory(catKey: string): void {
    selectedCategory.push(catKey);
    if (isAnimating) return;
    isAnimating = true;

    slides = slides.slice(0, 1);
    currentSlideIndex = 0;
    totalSteps = categories[catKey].length;

    const steps = categories[catKey];

    steps.forEach((step) => {
      const slide = template.cloneNode(true) as HTMLDivElement;
      slide.classList.remove("hidden");
      slide.classList.add("slide_frame");
      slide.removeAttribute("id");

      const title = slide.querySelector(".slide-title") as HTMLParagraphElement;
      const subtitle = slide.querySelector(
        ".slide-subtitle"
      ) as HTMLParagraphElement;
      title.textContent = step.question;
      subtitle.textContent = step.description || "";

      const btnContainer = slide.querySelector(".buttons") as HTMLDivElement;
      const tmplButton = slide.querySelector(
        ".tmpl-button-with-arrow"
      ) as HTMLButtonElement;
      btnContainer.innerHTML = "";

      step.options.forEach((opt) => {
        const btn = tmplButton.cloneNode(true) as HTMLButtonElement;
        const span = btn.querySelector(".button-text") as HTMLSpanElement;
        span.innerHTML = `${opt.label}${opt.price ? `<small> (+${opt.price} zł)</small>` : ""}`;
        btn.dataset.price = opt.price.toString();

        btn.addEventListener("click", () => {
          if (isAnimating) return;
          currentStepPrice = opt.price;
          prettyChoices.push(
            `${step.question} | Odp: ${opt.label} (+${opt.price} zł)`
          );
          showNextSlideOrSummary();
        });

        btnContainer.appendChild(btn);
      });

      tmplButton.remove();

      const pricing = slide.querySelector(
        ".slide-pricing"
      ) as HTMLParagraphElement;
      if (pricing) {
        pricing.textContent = `${totalPrice} PLN`;
        gsap.set(pricing, { opacity: 0, y: 20 });
      }

      // slide.style.position = "absolute";
      // slide.style.top = "50%";
      // slide.style.left = "0";
      // slide.style.transform = "translate(0, -50%)";
      // slide.style.width = "100vw";
      // slide.style.flexShrink = "0";

      gsap.set(slide, {
        z: 900,
        opacity: 0,
        scale: 0.7,
        filter: "blur(5px)",
        zIndex: 10,
        pointerEvents: "none",
      });
      container.appendChild(slide);
      slides.push(slide);
    });

    const prevSlide = slides[0];
    disableAllButtons(prevSlide);

    gsap.to(prevSlide, {
      z: -400,
      opacity: 0,
      scale: 0.95,
      filter: "blur(5px)",
      duration: 0.8,
      ease: "power2.inOut",
      zIndex: -50,
      onComplete: () => {
        setTimeout(() => {
          isAnimating = false;
          showNextSlide();
        }, 300);
      },
    });
  }

  async function showNextSlideOrSummary() {
    if (isAnimating) return;

    await updatePricingDisplay();

    if (currentSlideIndex >= slides.length - 1) {
      showSummarySlide();
    } else {
      showNextSlide();
    }
  }

  function showNextSlide(): void {
    if (isAnimating) return;
    if (currentSlideIndex >= slides.length - 1) return;

    isAnimating = true;

    const prevSlide = slides[currentSlideIndex];
    currentSlideIndex++;
    const nextSlide = slides[currentSlideIndex];
    disableAllButtons(prevSlide);

    gsap.set(nextSlide, {
      z: 900,
      opacity: 0,
      scale: 0.7,
      filter: "blur(5px)",
      zIndex: 10,
      pointerEvents: "none",
    });

    const pricing = nextSlide.querySelector(
      ".slide-pricing"
    ) as HTMLParagraphElement;
    if (pricing) {
      pricing.textContent = `${totalPrice} PLN`;
      gsap.set(pricing, { opacity: 0, y: 20 });
    }

    gsap.to(prevSlide, {
      z: -400,
      opacity: 0,
      scale: 0.95,
      filter: "blur(5px)",
      duration: 0.8,
      ease: "power2.inOut",
      zIndex: -50,
    });

    gsap.to(nextSlide, {
      z: 0,
      opacity: 1,
      scale: 1,
      filter: "blur(0px)",
      duration: 0.8,
      ease: "power2.out",
      delay: 0.5,
      onComplete: () => {
        isAnimating = false;
        updateProgressBar(nextSlide);
        fadeInContent(nextSlide);
      },
    });
  }

  function showSummarySlide(): void {
    if (isAnimating) return;
    isAnimating = true;

    const summarySlide = template.cloneNode(true) as HTMLDivElement;
    summarySlide.classList.remove("hidden");
    summarySlide.classList.add("slide_frame");
    summarySlide.removeAttribute("id");

    const title = summarySlide.querySelector(
      ".slide-title"
    ) as HTMLParagraphElement;
    const subtitle = summarySlide.querySelector(
      ".slide-subtitle"
    ) as HTMLParagraphElement;
    title.textContent = "Podsumowanie";
    subtitle.textContent = `Łączny koszt: ${totalPrice} zł`;

    const btnContainer = summarySlide.querySelector(
      ".buttons"
    ) as HTMLDivElement;
    btnContainer.innerHTML = "";

    const resetBtn = document.createElement("button") as HTMLButtonElement;
    const sendMailBtn = document.createElement("button") as HTMLButtonElement;
    resetBtn.className =
      "tmpl-button-with-arrow backdrop-blur-sm group min-w-[50%] p-2 gap-3 flex items-center border rounded-lg hover:scale-105 hover:bg-black/5 hover:dark:bg-white/10 border-black/15 dark:border-white/20 transition-all duration-300 ease-in-out";
    resetBtn.innerHTML = `<span class="button-text w-full z-10 relative text-center">Spróbuj ponownie</span>`;
    resetBtn.addEventListener("click", () => resetCalculator(summarySlide));
    btnContainer.appendChild(resetBtn);

    sendMailBtn.className =
      "tmpl-button-with-arrow backdrop-blur-sm group min-w-[50%] p-2 gap-3 flex items-center border rounded-lg hover:scale-105 hover:bg-black/5 hover:dark:bg-white/10 border-black/15 dark:border-white/20 transition-all duration-300 ease-in-out";
    sendMailBtn.innerHTML = `<span class="button-text w-full z-10 relative text-center">Wyślij wycenę na maila</span>`;
    sendMailBtn.addEventListener("click", () => {

      const subject = encodeURIComponent(`PROŚBA O WIĄŻĄCĄ WYCENĘ: Projekt ${selectedCategory} (Szacunkowy Koszt: ${totalPrice} zł)`);

      const target = "team@nikostuff.com";

      const body = encodeURIComponent(
  `Dzień dobry,\r\n\r\nWypełniłem(am) wstępny kalkulator wyceny projektu ${selectedCategory} i chciał(a)bym przejść do stworzenia wiążącej, oficjalnej wyceny.\r\n\r\nPoniżej przedstawiam podsumowanie moich wyborów i wstępny szacunek kosztu:\r\n\r\nKATEGORIA: ${selectedCategory}\r\n\r\nOPCJE WYBRANE W KALKULATORZE:\r\n${prettyChoices.map((c, i) => `${i + 1}. ${c}`).join("\r\n")}\r\n\r\nŁĄCZNY SZACUNKOWY KOSZT: ${totalPrice} zł netto\r\n\r\nDANE KONTAKTOWE KLIENTA:\r\nImię i Nazwisko / Nazwa Firmy: [PROSZĘ WPROWADZIĆ DANE]\r\nTelefon kontaktowy: [PROSZĘ WPROWADZIĆ DANE]\r\nDodatkowe uwagi do projektu: [PROSZĘ WPROWADZIĆ DODATKOWE INFORMACJE/PYTANIA]\r\n\r\nProszę o kontakt w celu omówienia szczegółów i stworzenia dokładnej oferty.\r\n\r\nPozdrawiam,\r\n[TWOJE IMIĘ I NAZWISKO]\r\n`
    );


      window.location.href = `mailto:${target}?subject=${subject}&body=${body}`;
    });
    btnContainer.appendChild(sendMailBtn);

    const pricing = summarySlide.querySelector(
      ".slide-pricing"
    ) as HTMLParagraphElement;
    if (pricing) {
      pricing.innerHTML = `<small>Ceny są orientacyjne</small>`;
      gsap.set(pricing, { opacity: 0, y: 20 });
    }

    // summarySlide.style.position = "absolute";
    // summarySlide.style.top = "50%";
    // summarySlide.style.left = "0";
    // summarySlide.style.transform = "translate(0, -50%)";
    // summarySlide.style.width = "100vw";
    // summarySlide.style.flexShrink = "0";

    gsap.set(summarySlide, {
      z: 900,
      opacity: 0,
      scale: 0.7,
      filter: "blur(5px)",
      zIndex: 10,
      pointerEvents: "none",
    });
    container.appendChild(summarySlide);
    slides.push(summarySlide);

    const prevSlide = slides[currentSlideIndex];
    currentSlideIndex++;

    gsap.to(prevSlide, {
      z: -400,
      opacity: 0,
      scale: 0.95,
      filter: "blur(5px)",
      duration: 0.8,
      ease: "power2.inOut",
      zIndex: -50,
    });
    gsap.to(summarySlide, {
      z: 0,
      opacity: 1,
      scale: 1,
      filter: "blur(0px)",
      duration: 0.8,
      ease: "power2.out",
      onComplete: () => {
        isAnimating = false;
        fadeInContent(summarySlide);
        updateProgressBar(summarySlide);
      },
    });
  }

  async function updatePricingDisplay(): Promise<void> {
    const slide = slides[currentSlideIndex];
    const pricing = slide.querySelector(
      ".slide-pricing"
    ) as HTMLParagraphElement;
    if (!pricing || pricing.innerHTML.includes("orientacyjne")) return;

    slide.querySelectorAll("button").forEach((b) => {
      b.disabled = true;
      gsap.to(b, { opacity: 0.9, duration: 0.2, ease: "power2.out" });
    });

    const start = totalPrice;
    const end = totalPrice + currentStepPrice;

    await gsap.to(
      { val: start },
      {
        val: end,
        duration: 0.6,
        ease: "power1.out",
        onUpdate() {
          pricing.textContent = `${Math.round(this.targets()[0].val)} PLN`;
        },
        onStart() {
          gsap.fromTo(
            pricing,
            { scale: 1 },
            {
              scale: 1.3,
              duration: 0.3,
              yoyo: true,
              repeat: 1,
              ease: "power1.out",
            }
          );
        },
      }
    );

    slide.querySelectorAll("button").forEach((b) => {
      gsap.to(b, { opacity: 1, duration: 0.3, ease: "power2.out" });
      b.disabled = false;
    });

    totalPrice = end;
  }

  function updateProgressBar(
    targetSlide?: HTMLDivElement,
    progressOverride?: number
  ): void {
    const progressBar = (
      targetSlide || slides[currentSlideIndex]
    ).querySelector(".progress-bar") as HTMLDivElement;
    const progress = (currentSlideIndex / totalSteps) * 100;
    const clamped = Math.min(Math.max(progress, 0), 100);
    console.log({ currentSlideIndex, totalSteps, clamped });
    if (progressOverride) {
      console.log("Override", progressOverride);
      progressBar.style.width = `${progressOverride}%`;
      return;
    }
    progressBar.style.width = `${clamped}%`;
  }

  function disableAllButtons(slide: HTMLDivElement): void {
    slide.querySelectorAll("button").forEach((b) => (b.disabled = true));
  }

  function resetCalculator(currentSlide?: HTMLDivElement): void {
    if (isAnimating) return;
    isAnimating = true;

    const slideToRemove = currentSlide || slides[currentSlideIndex];

    gsap.to(slideToRemove, {
      z: -400,
      opacity: 0,
      scale: 0.95,
      filter: "blur(5px)",
      duration: 0.6,
      ease: "power2.inOut",
      onComplete: () => {
        Array.from(container.children).forEach((child) => {
          if (child.id !== "template") child.remove();
        });
        totalPrice = 0;
        currentStepPrice = 0;
        currentSlideIndex = 0;
        slides = [];
        isAnimating = false;
        setupFirstSlide();
        prettyChoices.length = 0;
      },
    });
  }
</script>

<style>
  .slide_frame {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
  }
</style>
