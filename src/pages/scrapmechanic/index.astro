---
// export const prerender = false;
import PageLayout from "@layouts/PageLayout.astro";
import { SITE } from "@consts";
import TwinklingStars from "@components/TwinklingStars.astro";
import MeteorShower from "@components/MeteorShower.astro";
import FancyDiv from "@components/FancyDiv.astro";
import BackgroundFX from "@components/page_effects/BackgroundFX.astro";
import POD from "@components/POD.astro";
---

<PageLayout title="Scrap Mechanic - Chapter 2" description={SITE.DESCRIPTION}>
  <!-- <script is:inline data-astro-rerun async src="/js/scroll_animation.js"
  ></script> -->

  <POD />
  <!-- Light Mode: Particles -->
  <div class="absolute inset-0 block dark:hidden">
    <div id="particles1" class="fixed inset-0"></div>
    <div id="particles2" class="fixed inset-0"></div>
    <div id="particles3" class="fixed inset-0"></div>
  </div>

  <!-- Dark Theme: Stars -->
  <div class="absolute inset-0 hidden dark:block">
    <div id="stars1" class="fixed inset-0"></div>
    <div id="stars2" class="fixed inset-0"></div>
    <div id="stars3" class="fixed inset-0"></div>
  </div>

  <!-- Dark Theme: Twinkling Stars / Metors -->
  <div id="galaxy" class="fixed inset-0">
    <div class="hidden dark:block">
      <TwinklingStars />
      <MeteorShower />
    </div>
  </div>
  <BackgroundFX />

  <div class="fixed top-0 left-0 w-svw h-svh flex items-center justify-center">
    <div class="w-svw">
      <FancyDiv margin_bottom="50" isAnimated={true} theme="default_big">
        <section class="animate pb-0">
          <p class="font-semibold text-black dark:text-white">Scrap Mechanic</p>
          <p class="font-bold text-sm mb-2">
            We've been waiting for Chapter 2 since:
          </p>

          <p
            class="text-5xl md:text-9xl lg:text-9xl font-extrabold text-center mb-2 w-full"
          >
            2020
          </p>

          <!-- Line -->
          <hr class="border-black/10 dark:border-white/25 animate" />

          <p class="font-semibold text-black dark:text-white mt-5">
            Still waiting...
          </p>
          <p class="font-bold text-sm mb-2">Time passed so far:</p>

          <p
            class="text-2xl md:text-4xl lg:text-4xl font-extrabold text-center w-full"
            id="timeElapsed"
          >
            0y 0d 0h 0m 0s
          </p>
        </section>
      </FancyDiv>
    </div>
  </div>
</PageLayout>

<script>
  import { gsap } from "gsap";

  const startDate = new Date("2020-05-07T00:00:00");

  let timeElapsedElement: HTMLElement | null;

  function getTimeElapsedElement() {
    if (!timeElapsedElement) {
      timeElapsedElement = document.getElementById("timeElapsed");
    }
    return timeElapsedElement;
  }

  function flipChar(span: HTMLElement, newChar: string) {
    gsap.to(span, {
      rotationX: 90,
      duration: 0.2,
      ease: "power1.in",
      transformOrigin: "50% 50%",
      onComplete: () => {
        span.textContent = newChar === " " ? "\u00A0" : newChar; // always use nbsp for spaces
        gsap.fromTo(
          span,
          { rotationX: -90 },
          {
            rotationX: 0,
            duration: 0.2,
            ease: "power1.out",
            transformOrigin: "50% 50%",
          }
        );
      },
    });
  }

  function renderTime(text: string) {
    const el = getTimeElapsedElement();
    if (!el) return;

    const oldChars = [...el.querySelectorAll("span")];
    const newChars = text.split("");

    
    if (oldChars.length !== newChars.length) {
      el.innerHTML = newChars
        .map((char: string) => {
          const widthClass = char === " " ? "min-w-[0.3em]" : "min-w-[0.65em]";
          return `<span class="inline-block backface-hidden ${widthClass} text-center">${char === " " ? "\u00A0" : char}</span>`;
        })
        .join("");
      return;
    }


    newChars.forEach((char: any, i: number) => {
      const span = oldChars[i];
      const current = span.textContent === "\u00A0" ? " " : span.textContent;
      if (current !== char) {
        flipChar(span, char);
      }
    });
  }

  function pad2(num: number) {
    return num.toString().padStart(2, "0");
  }

  function updateTimeElapsed() {
    const now = new Date();

    let years = now.getFullYear() - startDate.getFullYear();
    let months = now.getMonth() - startDate.getMonth();
    let days = now.getDate() - startDate.getDate();
    let hours = now.getHours() - startDate.getHours();
    let minutes = now.getMinutes() - startDate.getMinutes();
    let seconds = now.getSeconds() - startDate.getSeconds();

    if (seconds < 0) {
      seconds += 60;
      minutes--;
    }
    if (minutes < 0) {
      minutes += 60;
      hours--;
    }
    if (hours < 0) {
      hours += 24;
      days--;
    }
    if (days < 0) {
      const prevMonth = new Date(
        now.getFullYear(),
        now.getMonth(),
        0
      ).getDate();
      days += prevMonth;
      months--;
    }
    if (months < 0) {
      months += 12;
      years--;
    }


    const newText = `${years}y ${pad2(months)}m ${pad2(days)}d ${pad2(hours)}h ${pad2(minutes)}m ${pad2(seconds)}s`;
    renderTime(newText);
  }



  function init() {
    updateTimeElapsed();
    setInterval(updateTimeElapsed, 1000);
  }

  document.addEventListener("DOMContentLoaded", () => {
    init();
  });
</script>
